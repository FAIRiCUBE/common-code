#!/usr/bin/env python3
"""
GeoTIFF to Cloud Optimized Geotiff for FAIRiCUBE Web maps
-------------------------

This script provides functionality to:
1. Convert regular GeoTIFF files to Cloud Optimized GeoTIFF (COG)
2. Add overviews for efficient pyramidal access
3. Preserve metadata in PAM auxiliary XML files
4. Reproject to EPSG:3857 for best Web map experience

Requirements:
    - GDAL (with gdal_translate)

Usage examples:
    Basic usage:
        python3 tif_to_COG_web.py input.tif
    
    Custom output paths:
        python3 tif_to_COG_web.py input.tif -o output_COG.tif

Known issues: The script may change the value range. Check the results before publishing. Consider first reprojecting using gdalwarp. Example command:
    gdalwarp -overwrite -s_srs <source_srs> -t_srs EPSG:3857 -r near -co COMPRESS=DEFLATE -of COG -co STATISTICS=YES -co TILING_SCHEME=GoogleMapsCompatible -co ADD_ALPHA=NO input.tif output_3857.tif

Technical Details:
-----------------
COG Creation (gdal_translate):
   - Uses LZW compression for efficient storage
   - Enables internal tiling for optimized access
   - Copies source overviews to maintain pyramid structure
   - Forces PAM auxiliary XML file generation
   - Command: gdal_translate input.tif output_COG.tif 
     -of COG
     -co COMPRESS=LZW 
     -co STATISTICS=YES
     -co TILING_SCHEME=GoogleMapsCompatible
     -co ADD_ALPHA=NO
     -a_nodata -9999

Generated by:
    This code was generated with the help of Claude 3.5 Sonnet (Anthropic, 2024).

"""

import subprocess
import os
import argparse
from osgeo import gdal


def convert_to_cog(input_tiff, output_cog=None, nodata_value_arg=None):
    """
    Convert a regular GeoTIFF to Cloud Optimized GeoTIFF with overviews
    and preserve metadata.

    Args:
        input_tiff (str): Path to input GeoTIFF file
        output_cog (str, optional): Path for output COG file. If None, uses 'output_COG.tif'

    Returns:
        tuple: Paths to (COG file, metadata file)

    Raises:
        FileNotFoundError: If input file doesn't exist
        RuntimeError: If GDAL commands fail or processing errors occur

    Example:
        >>> cog_file, meta_file = convert_to_cog("input.tif")
        >>> print(f"Generated files: {cog_file}, {meta_file}")
    """
    if not os.path.exists(input_tiff):
        raise FileNotFoundError(f"Input file not found: {input_tiff}")

    # Set default output paths if not provided
    if output_cog is None:
        output_cog = "output_COG.tif"

    # read nodata value from input tiff
    ds = gdal.Open(input_tiff)
    if ds is None:
        raise RuntimeError("Failed to open input file")
    nodata_value = ds.GetRasterBand(1).GetNoDataValue()
    if nodata_value is None and nodata_value_arg is None:
        print('Warning! NODATA value not found in input GeoTIff, and none provided, using default -9999')
        nodata_value = -9999.25
    elif nodata_value_arg is not None:
        nodata_value = nodata_value_arg
    else:
        print("Using NODATA value from input GeoTIFF: ", nodata_value)
        nodata_value = nodata_value

    try:

        # Step 1: Convert to Cloud Optimized GeoTIFF with forced PAM file generation
        print("Converting to COG...")
        gdal_translate_cmd = [
            "gdal_translate",
            "-of", "COG",
            "-co", "COMPRESS=LZW",
            
            "-co", "TILING_SCHEME=GoogleMapsCompatible",
            "-co", "ADD_ALPHA=NO",
            "-a_nodata", str(nodata_value),
            "-scale", "0", "1", "0", "1",
            input_tiff,
            output_cog
        ]


        # the following argument is removed as it throws a "Warning 6: driver COG does not support creation option STATISTICS"
        #  "-co", "STATISTICS=YES",
        
        # subprocess.run(gdal_translate_cmd, check=True)
        # collecting and printing detailed error information 
        result = subprocess.run(gdal_translate_cmd, check=True, capture_output=True, text=True)
        print(result.stdout)
        print(result.stderr)
        
        # Step 2: If PAM file is not created in the previous step, force creation with gdalinfo --stats
        # Get the base name without extension for metadata file
        base_name = os.path.splitext(output_cog)[0]
        metadata_file = f"{base_name}.tif.aux.xml"

        if not os.path.exists(metadata_file):
            print('generating PAM')
            gdalinfo_cmd = ["gdalinfo", "-stats", output_cog]
            subprocess.run(gdalinfo_cmd, check=True)

        return output_cog, metadata_file

    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"GDAL command failed: {e.cmd}") from e
    except Exception as e:
        raise RuntimeError(f"Processing failed: {str(e)}") from e


def main():
    """
    Main function to handle command-line interface.
    """
    parser = argparse.ArgumentParser(
        description="Convert GeoTIFF to Cloud Optimized GeoTIFF for FAIRiCUBE Web maps",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
    %(prog)s input.tif
    %(prog)s input.tif -o output_COG.tif
    %(prog)s input.tif -o output_COG.tif -n -1
        """,
    )

    parser.add_argument("input_tiff", help="Input GeoTIFF file")
    parser.add_argument(
        "-o", "--output", help="Output COG file (default: output_COG.tif)"
    )
    parser.add_argument(
        "-n", "--nodata", help="NODATA value to use in the GeoTIFF file (default: -9999)"
    )

    args = parser.parse_args()

    try:
        cog_file, meta_file = convert_to_cog(args.input_tiff, args.output)
        print(f"Successfully created:")
        print(f"  COG file: {cog_file}")
        print(f"  Metadata: {meta_file}")
    except Exception as e:
        print(f"Error: {str(e)}")
        return 1
    return 0


if __name__ == "__main__":
    exit(main())
