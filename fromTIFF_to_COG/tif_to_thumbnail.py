#!/usr/bin/env python3
"""
GeoTIFF to thumbnail
-------------------------

This script generates a PNG thumbnail from a GeoTiff file

Requirements:
    - GDAL (with gdal_translate)

Usage examples:
    Basic usage:
        python3 tif_to_thumbnail.py input.tif
    
    Custom output paths:
        python3 tif_to_thumbnail.py input.tif -o output_thumbnail.png

Technical Details:
-----------------
Thumbnail generation from GeoTiff:
   - Uses the most appropriate overview level
   - Maintains aspect ratio
   - Performs automatic contrast stretching
   - Optimizes PNG output
   - Default size: 256px (maximum dimension)

Generated by:
    This code was generated with the help of Claude 3.5 Sonnet (Anthropic, 2024).

"""
import argparse
import rasterio
from rasterio.enums import Resampling
from PIL import Image
import numpy as np


def create_thumbnail_from_tiff(tiff_path, output_path=None, max_size=256, bands=[1]):
    """
    Generate a PNG thumbnail from a Cloud Optimized GeoTIFF efficiently.

    This function creates a thumbnail by:
    1. Selecting the most appropriate overview level
    2. Reading and resampling only the required data
    3. Performing automatic contrast stretching
    4. Optimizing the PNG output

    Args:
        tiff_path (str): Path to the GeoTiff file
        output_path (str): Path where the PNG thumbnail should be saved
        max_size (int): Maximum dimension (width or height) of the output thumbnail
        bands (list): List of band indices to read (default: [1] for grayscale raster)

    Returns:
        str: Path to the generated thumbnail

    Example:
        >>> create_thumbnail_from_tiff("example.tif", "thumb.png", max_size=512)
        'thumb.png'
    """
    with rasterio.open(tiff_path) as src:
        # Calculate optimal overview level
        min_dimension = min(src.width, src.height)
        overview_level = 0

        if src.overviews(1):
            for idx, overview in enumerate(src.overviews(1)):
                if min_dimension // overview > max_size:
                    continue
                overview_level = idx
                break

        # Read the appropriate overview level
        scale_factor = src.overviews(1)[overview_level] if overview_level else 1

        # Calculate new dimensions while maintaining aspect ratio
        width = src.width // scale_factor
        height = src.height // scale_factor

        if width > max_size or height > max_size:
            scale = max_size / max(width, height)
            width = int(width * scale)
            height = int(height * scale)

        # Read and resample the data
        data = []
        for band in bands:
            band_data = src.read(
                band, out_shape=(height, width), resampling=Resampling.average
            )
            data.append(band_data)

        # Stack bands and normalize
        img_array = np.dstack(data)

        # Normalize to 0-255 range
        min_val = img_array.min()
        max_val = img_array.max()
        img_array = ((img_array - min_val) * (255 / (max_val - min_val))).astype(
            np.uint8
        )

        # Create and save PNG
        if len(bands) == 1:
            img = Image.fromarray(img_array[:, :, 0].astype(np.uint8))
        else:
            img = Image.fromarray(img_array)

        if output_path is None:
            output_path = tiff_path.replace(".tif", "_thumbnail.png")
        img.save(output_path, "PNG", optimize=True)

    return output_path


def main():
    """
    Main function to handle command-line interface.
    """
    parser = argparse.ArgumentParser(
        description="Generate thumbnail from GeoTIFF",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
    %(prog)s input.tif
    %(prog)s input.tif -o thumb.png --max-size 512
        """,
    )

    parser.add_argument("input_tiff", help="Input GeoTIFF file")
    parser.add_argument(
        "-o",
        "--output",
        help="Output thumbnail file (default: None). If not given the thumbnail is saved in the same folder of the original file",
    )
    parser.add_argument(
        "--max-size",
        type=int,
        default=256,
        help="Maximum thumbnail dimension in pixels (default: 256)",
    )

    args = parser.parse_args()

    try:
        thumb_file = create_thumbnail_from_tiff(args.input_tiff, args.output)
        print(f"Successfully created:")
        print(f"  Thumbnail: {thumb_file}")

    except Exception as e:
        print(f"Error: {str(e)}")
        return 1
    return 0


if __name__ == "__main__":
    exit(main())
